// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	ethgo "github.com/Ethernal-Tech/ethgo"
	mock "github.com/stretchr/testify/mock"
)

// EventTrackerStore is an autogenerated mock type for the EventTrackerStore type
type EventTrackerStore struct {
	mock.Mock
}

type EventTrackerStore_Expecter struct {
	mock *mock.Mock
}

func (_m *EventTrackerStore) EXPECT() *EventTrackerStore_Expecter {
	return &EventTrackerStore_Expecter{mock: &_m.Mock}
}

// GetAllLogs provides a mock function with given fields:
func (_m *EventTrackerStore) GetAllLogs() ([]*ethgo.Log, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllLogs")
	}

	var r0 []*ethgo.Log
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*ethgo.Log, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*ethgo.Log); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ethgo.Log)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventTrackerStore_GetAllLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLogs'
type EventTrackerStore_GetAllLogs_Call struct {
	*mock.Call
}

// GetAllLogs is a helper method to define mock.On call
func (_e *EventTrackerStore_Expecter) GetAllLogs() *EventTrackerStore_GetAllLogs_Call {
	return &EventTrackerStore_GetAllLogs_Call{Call: _e.mock.On("GetAllLogs")}
}

func (_c *EventTrackerStore_GetAllLogs_Call) Run(run func()) *EventTrackerStore_GetAllLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventTrackerStore_GetAllLogs_Call) Return(_a0 []*ethgo.Log, _a1 error) *EventTrackerStore_GetAllLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventTrackerStore_GetAllLogs_Call) RunAndReturn(run func() ([]*ethgo.Log, error)) *EventTrackerStore_GetAllLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastProcessedBlock provides a mock function with given fields:
func (_m *EventTrackerStore) GetLastProcessedBlock() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedBlock")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventTrackerStore_GetLastProcessedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProcessedBlock'
type EventTrackerStore_GetLastProcessedBlock_Call struct {
	*mock.Call
}

// GetLastProcessedBlock is a helper method to define mock.On call
func (_e *EventTrackerStore_Expecter) GetLastProcessedBlock() *EventTrackerStore_GetLastProcessedBlock_Call {
	return &EventTrackerStore_GetLastProcessedBlock_Call{Call: _e.mock.On("GetLastProcessedBlock")}
}

func (_c *EventTrackerStore_GetLastProcessedBlock_Call) Run(run func()) *EventTrackerStore_GetLastProcessedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventTrackerStore_GetLastProcessedBlock_Call) Return(_a0 uint64, _a1 error) *EventTrackerStore_GetLastProcessedBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventTrackerStore_GetLastProcessedBlock_Call) RunAndReturn(run func() (uint64, error)) *EventTrackerStore_GetLastProcessedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLog provides a mock function with given fields: blockNumber, logIndex
func (_m *EventTrackerStore) GetLog(blockNumber uint64, logIndex uint64) (*ethgo.Log, error) {
	ret := _m.Called(blockNumber, logIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetLog")
	}

	var r0 *ethgo.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (*ethgo.Log, error)); ok {
		return rf(blockNumber, logIndex)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) *ethgo.Log); ok {
		r0 = rf(blockNumber, logIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ethgo.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(blockNumber, logIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventTrackerStore_GetLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLog'
type EventTrackerStore_GetLog_Call struct {
	*mock.Call
}

// GetLog is a helper method to define mock.On call
//   - blockNumber uint64
//   - logIndex uint64
func (_e *EventTrackerStore_Expecter) GetLog(blockNumber interface{}, logIndex interface{}) *EventTrackerStore_GetLog_Call {
	return &EventTrackerStore_GetLog_Call{Call: _e.mock.On("GetLog", blockNumber, logIndex)}
}

func (_c *EventTrackerStore_GetLog_Call) Run(run func(blockNumber uint64, logIndex uint64)) *EventTrackerStore_GetLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *EventTrackerStore_GetLog_Call) Return(_a0 *ethgo.Log, _a1 error) *EventTrackerStore_GetLog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventTrackerStore_GetLog_Call) RunAndReturn(run func(uint64, uint64) (*ethgo.Log, error)) *EventTrackerStore_GetLog_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogsByBlockNumber provides a mock function with given fields: blockNumber
func (_m *EventTrackerStore) GetLogsByBlockNumber(blockNumber uint64) ([]*ethgo.Log, error) {
	ret := _m.Called(blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetLogsByBlockNumber")
	}

	var r0 []*ethgo.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*ethgo.Log, error)); ok {
		return rf(blockNumber)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*ethgo.Log); ok {
		r0 = rf(blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ethgo.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventTrackerStore_GetLogsByBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogsByBlockNumber'
type EventTrackerStore_GetLogsByBlockNumber_Call struct {
	*mock.Call
}

// GetLogsByBlockNumber is a helper method to define mock.On call
//   - blockNumber uint64
func (_e *EventTrackerStore_Expecter) GetLogsByBlockNumber(blockNumber interface{}) *EventTrackerStore_GetLogsByBlockNumber_Call {
	return &EventTrackerStore_GetLogsByBlockNumber_Call{Call: _e.mock.On("GetLogsByBlockNumber", blockNumber)}
}

func (_c *EventTrackerStore_GetLogsByBlockNumber_Call) Run(run func(blockNumber uint64)) *EventTrackerStore_GetLogsByBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *EventTrackerStore_GetLogsByBlockNumber_Call) Return(_a0 []*ethgo.Log, _a1 error) *EventTrackerStore_GetLogsByBlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventTrackerStore_GetLogsByBlockNumber_Call) RunAndReturn(run func(uint64) ([]*ethgo.Log, error)) *EventTrackerStore_GetLogsByBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// InsertLastProcessedBlock provides a mock function with given fields: blockNumber
func (_m *EventTrackerStore) InsertLastProcessedBlock(blockNumber uint64) error {
	ret := _m.Called(blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for InsertLastProcessedBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventTrackerStore_InsertLastProcessedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertLastProcessedBlock'
type EventTrackerStore_InsertLastProcessedBlock_Call struct {
	*mock.Call
}

// InsertLastProcessedBlock is a helper method to define mock.On call
//   - blockNumber uint64
func (_e *EventTrackerStore_Expecter) InsertLastProcessedBlock(blockNumber interface{}) *EventTrackerStore_InsertLastProcessedBlock_Call {
	return &EventTrackerStore_InsertLastProcessedBlock_Call{Call: _e.mock.On("InsertLastProcessedBlock", blockNumber)}
}

func (_c *EventTrackerStore_InsertLastProcessedBlock_Call) Run(run func(blockNumber uint64)) *EventTrackerStore_InsertLastProcessedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *EventTrackerStore_InsertLastProcessedBlock_Call) Return(_a0 error) *EventTrackerStore_InsertLastProcessedBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventTrackerStore_InsertLastProcessedBlock_Call) RunAndReturn(run func(uint64) error) *EventTrackerStore_InsertLastProcessedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// InsertLogs provides a mock function with given fields: logs
func (_m *EventTrackerStore) InsertLogs(logs []*ethgo.Log) error {
	ret := _m.Called(logs)

	if len(ret) == 0 {
		panic("no return value specified for InsertLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*ethgo.Log) error); ok {
		r0 = rf(logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventTrackerStore_InsertLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertLogs'
type EventTrackerStore_InsertLogs_Call struct {
	*mock.Call
}

// InsertLogs is a helper method to define mock.On call
//   - logs []*ethgo.Log
func (_e *EventTrackerStore_Expecter) InsertLogs(logs interface{}) *EventTrackerStore_InsertLogs_Call {
	return &EventTrackerStore_InsertLogs_Call{Call: _e.mock.On("InsertLogs", logs)}
}

func (_c *EventTrackerStore_InsertLogs_Call) Run(run func(logs []*ethgo.Log)) *EventTrackerStore_InsertLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*ethgo.Log))
	})
	return _c
}

func (_c *EventTrackerStore_InsertLogs_Call) Return(_a0 error) *EventTrackerStore_InsertLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventTrackerStore_InsertLogs_Call) RunAndReturn(run func([]*ethgo.Log) error) *EventTrackerStore_InsertLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventTrackerStore creates a new instance of EventTrackerStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventTrackerStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventTrackerStore {
	mock := &EventTrackerStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
