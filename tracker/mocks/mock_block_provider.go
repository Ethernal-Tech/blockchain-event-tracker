// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	big "math/big"

	ethgo "github.com/Ethernal-Tech/ethgo"
	mock "github.com/stretchr/testify/mock"
)

// BlockProvider is an autogenerated mock type for the BlockProvider type
type BlockProvider struct {
	mock.Mock
}

type BlockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockProvider) EXPECT() *BlockProvider_Expecter {
	return &BlockProvider_Expecter{mock: &_m.Mock}
}

// ChainID provides a mock function with given fields:
func (_m *BlockProvider) ChainID() (*big.Int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func() (*big.Int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockProvider_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type BlockProvider_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
func (_e *BlockProvider_Expecter) ChainID() *BlockProvider_ChainID_Call {
	return &BlockProvider_ChainID_Call{Call: _e.mock.On("ChainID")}
}

func (_c *BlockProvider_ChainID_Call) Run(run func()) *BlockProvider_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockProvider_ChainID_Call) Return(_a0 *big.Int, _a1 error) *BlockProvider_ChainID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockProvider_ChainID_Call) RunAndReturn(run func() (*big.Int, error)) *BlockProvider_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByNumber provides a mock function with given fields: i, full
func (_m *BlockProvider) GetBlockByNumber(i ethgo.BlockNumber, full bool) (*ethgo.Block, error) {
	ret := _m.Called(i, full)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByNumber")
	}

	var r0 *ethgo.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(ethgo.BlockNumber, bool) (*ethgo.Block, error)); ok {
		return rf(i, full)
	}
	if rf, ok := ret.Get(0).(func(ethgo.BlockNumber, bool) *ethgo.Block); ok {
		r0 = rf(i, full)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ethgo.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(ethgo.BlockNumber, bool) error); ok {
		r1 = rf(i, full)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockProvider_GetBlockByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByNumber'
type BlockProvider_GetBlockByNumber_Call struct {
	*mock.Call
}

// GetBlockByNumber is a helper method to define mock.On call
//   - i ethgo.BlockNumber
//   - full bool
func (_e *BlockProvider_Expecter) GetBlockByNumber(i interface{}, full interface{}) *BlockProvider_GetBlockByNumber_Call {
	return &BlockProvider_GetBlockByNumber_Call{Call: _e.mock.On("GetBlockByNumber", i, full)}
}

func (_c *BlockProvider_GetBlockByNumber_Call) Run(run func(i ethgo.BlockNumber, full bool)) *BlockProvider_GetBlockByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ethgo.BlockNumber), args[1].(bool))
	})
	return _c
}

func (_c *BlockProvider_GetBlockByNumber_Call) Return(_a0 *ethgo.Block, _a1 error) *BlockProvider_GetBlockByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockProvider_GetBlockByNumber_Call) RunAndReturn(run func(ethgo.BlockNumber, bool) (*ethgo.Block, error)) *BlockProvider_GetBlockByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function with given fields: filter
func (_m *BlockProvider) GetLogs(filter *ethgo.LogFilter) ([]*ethgo.Log, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 []*ethgo.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethgo.LogFilter) ([]*ethgo.Log, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*ethgo.LogFilter) []*ethgo.Log); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ethgo.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethgo.LogFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockProvider_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type BlockProvider_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - filter *ethgo.LogFilter
func (_e *BlockProvider_Expecter) GetLogs(filter interface{}) *BlockProvider_GetLogs_Call {
	return &BlockProvider_GetLogs_Call{Call: _e.mock.On("GetLogs", filter)}
}

func (_c *BlockProvider_GetLogs_Call) Run(run func(filter *ethgo.LogFilter)) *BlockProvider_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ethgo.LogFilter))
	})
	return _c
}

func (_c *BlockProvider_GetLogs_Call) Return(_a0 []*ethgo.Log, _a1 error) *BlockProvider_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockProvider_GetLogs_Call) RunAndReturn(run func(*ethgo.LogFilter) ([]*ethgo.Log, error)) *BlockProvider_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlockProvider creates a new instance of BlockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockProvider {
	mock := &BlockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
