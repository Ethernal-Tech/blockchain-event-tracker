// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	big "math/big"

	ethgo "github.com/Ethernal-Tech/ethgo"
	mock "github.com/stretchr/testify/mock"
)

// EventSubscriber is an autogenerated mock type for the EventSubscriber type
type EventSubscriber struct {
	mock.Mock
}

type EventSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *EventSubscriber) EXPECT() *EventSubscriber_Expecter {
	return &EventSubscriber_Expecter{mock: &_m.Mock}
}

// AddLog provides a mock function with given fields: chainID, log
func (_m *EventSubscriber) AddLog(chainID *big.Int, log *ethgo.Log) error {
	ret := _m.Called(chainID, log)

	if len(ret) == 0 {
		panic("no return value specified for AddLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int, *ethgo.Log) error); ok {
		r0 = rf(chainID, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventSubscriber_AddLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLog'
type EventSubscriber_AddLog_Call struct {
	*mock.Call
}

// AddLog is a helper method to define mock.On call
//   - chainID *big.Int
//   - log *ethgo.Log
func (_e *EventSubscriber_Expecter) AddLog(chainID interface{}, log interface{}) *EventSubscriber_AddLog_Call {
	return &EventSubscriber_AddLog_Call{Call: _e.mock.On("AddLog", chainID, log)}
}

func (_c *EventSubscriber_AddLog_Call) Run(run func(chainID *big.Int, log *ethgo.Log)) *EventSubscriber_AddLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int), args[1].(*ethgo.Log))
	})
	return _c
}

func (_c *EventSubscriber_AddLog_Call) Return(_a0 error) *EventSubscriber_AddLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventSubscriber_AddLog_Call) RunAndReturn(run func(*big.Int, *ethgo.Log) error) *EventSubscriber_AddLog_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventSubscriber creates a new instance of EventSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventSubscriber {
	mock := &EventSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
